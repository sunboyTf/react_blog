[{"D:\\Blog\\admin\\src\\index.js":"1","D:\\Blog\\admin\\src\\App.js":"2","D:\\Blog\\admin\\src\\Pages\\Login.js":"3","D:\\Blog\\admin\\src\\Pages\\AdminIndex.js":"4","D:\\Blog\\admin\\src\\Pages\\Main.js":"5","D:\\Blog\\admin\\src\\Pages\\AddArticle.js":"6","D:\\Blog\\admin\\src\\config\\apiUrl.js":"7","D:\\Blog\\admin\\src\\Pages\\ArticleList.js":"8","D:\\Blog\\admin\\src\\Pages\\Index.js":"9"},{"size":154,"mtime":1606185278982,"results":"10","hashOfConfig":"11"},{"size":221,"mtime":1606183322793,"results":"12","hashOfConfig":"11"},{"size":2848,"mtime":1606200565464,"results":"13","hashOfConfig":"11"},{"size":3363,"mtime":1606209963761,"results":"14","hashOfConfig":"11"},{"size":391,"mtime":1606209972816,"results":"15","hashOfConfig":"11"},{"size":9857,"mtime":1606208119930,"results":"16","hashOfConfig":"11"},{"size":583,"mtime":1606370877017,"results":"17","hashOfConfig":"11"},{"size":3681,"mtime":1606210392207,"results":"18","hashOfConfig":"11"},{"size":254,"mtime":1606209932470,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"dcdocf",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Blog\\admin\\src\\index.js",[],["41","42"],"D:\\Blog\\admin\\src\\App.js",[],"D:\\Blog\\admin\\src\\Pages\\Login.js",["43","44"],"D:\\Blog\\admin\\src\\Pages\\AdminIndex.js",["45","46","47","48","49"],"D:\\Blog\\admin\\src\\Pages\\Main.js",[],"D:\\Blog\\admin\\src\\Pages\\AddArticle.js",["50","51","52","53","54"],"import React, { useState, useEffect } from 'react';\r\nimport marked from 'marked'\r\nimport '../static/css/AddArticle.css'\r\nimport { Row, Col, Input, Select, Button, DatePicker, message } from 'antd'\r\nimport axios from 'axios'\r\nimport servicePath from '../config/apiUrl'\r\nconst { Option } = Select;\r\nconst { TextArea } = Input\r\nfunction AddArticle(props) {\r\n    const [articleId, setArticleId] = useState(0)  // 文章的ID，如果是0说明是新增加，如果不是0，说明是修改\r\n    const [articleTitle, setArticleTitle] = useState('')   //文章标题\r\n    const [articleContent, setArticleContent] = useState('')  //markdown的编辑内容\r\n    const [markdownContent, setMarkdownContent] = useState('预览内容') //html内容\r\n    const [introducemd, setIntroducemd] = useState()            //简介的markdown内容\r\n    const [introducehtml, setIntroducehtml] = useState('等待编辑') //简介的html内容\r\n    const [showDate, setShowDate] = useState()   //发布日期\r\n    const [updateDate, setUpdateDate] = useState() //修改日志的日期\r\n    const [typeInfo, setTypeInfo] = useState([]) // 文章类别信息\r\n    const [selectedType, setSelectType] = useState(1) //选择的文章类别\r\n    marked.setOptions({\r\n        renderer: marked.Renderer(),\r\n        gfm: true,\r\n        pedantic: false,\r\n        sanitize: false,\r\n        tables: true,\r\n        breaks: false,\r\n        smartLists: true,\r\n        smartypants: false,\r\n    });\r\n    const changeContent = (e) => {\r\n        setArticleContent(e.target.value)\r\n        let html = marked(e.target.value)\r\n        setMarkdownContent(html)\r\n    }\r\n\r\n    const changeIntroduce = (e) => {\r\n        setIntroducemd(e.target.value)\r\n        let html = marked(e.target.value)\r\n        setIntroducehtml(html)\r\n    }\r\n\r\n    //从中台得到文章类别信息\r\n    const getTypeInfo = () => {\r\n        axios({\r\n            method: 'get',\r\n            url: servicePath.getTypeInfo,\r\n            header: { 'Access-Control-Allow-Origin': '*' },\r\n            withCredentials: true\r\n        }).then(\r\n            res => {\r\n                if (res.data.data == \"没有登录\") {\r\n                    localStorage.removeItem('openId')\r\n                    props.history.push('/login')\r\n                } else {\r\n                    setTypeInfo(res.data.data)\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    //选择类别后的便\r\n    const selectTypeHandler = (value) => {\r\n        setSelectType(value)\r\n    }\r\n\r\n    //保存文章的方法\r\n    const saveArticle = () => {\r\n        // markedContent()  //先进行转换\r\n        if (!selectedType) {\r\n            message.error('必须选择文章类别')\r\n            return false\r\n        } else if (!articleTitle) {\r\n            message.error('文章名称不能为空')\r\n            return false\r\n        } else if (!articleContent) {\r\n            message.error('文章内容不能为空')\r\n            return false\r\n        } else if (!introducemd) {\r\n            message.error('简介不能为空')\r\n            return false\r\n        } else if (!showDate) {\r\n            message.error('发布日期不能为空')\r\n            return false\r\n        }\r\n        let dataProps = {}\r\n        console.log(selectedType)\r\n        dataProps.type_id = selectedType\r\n        dataProps.title = articleTitle\r\n        dataProps.article_content = articleContent\r\n        dataProps.introduce = introducemd\r\n        let datetext = showDate.replace('-', '/') //把字符串转换成时间戳\r\n        dataProps.addTime = (new Date(datetext).getTime()) / 1000\r\n        // dataProps.part_count = partCount\r\n        // dataProps.article_content_html = markdownContent\r\n        // dataProps.introduce_html = introducehtml\r\n\r\n        if (articleId == 0) {\r\n            console.log('articleId=:' + articleId)\r\n            dataProps.view_count = Math.ceil(Math.random() * 100) + 1000\r\n            axios({\r\n                method: 'post',\r\n                url: servicePath.addArticle,\r\n                header: { 'Access-Control-Allow-Origin': '*' },\r\n                data: dataProps,\r\n                withCredentials: true\r\n            }).then(\r\n                res => {\r\n                    setArticleId(res.data.insertId)\r\n                    if (res.data.isScuccess) {\r\n                        message.success('文章发布成功')\r\n                    } else {\r\n                        message.error('文章发布失败');\r\n                    }\r\n\r\n                }\r\n            )\r\n        } else {\r\n            console.log('articleId:' + articleId)\r\n            dataProps.id = articleId\r\n            axios({\r\n                method: 'post',\r\n                url: servicePath.updateArticle,\r\n                header: { 'Access-Control-Allow-Origin': '*' },\r\n                data: dataProps,\r\n                withCredentials: true\r\n            }).then(\r\n                res => {\r\n\r\n                    if (res.data.isScuccess) {\r\n                        message.success('文章保存成功')\r\n                    } else {\r\n                        message.error('保存失败');\r\n                    }\r\n\r\n\r\n                }\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n    const getArticleById = (id) => {\r\n        axios(servicePath.getArticleById + id, {\r\n            withCredentials: true,\r\n            header: { 'Access-Control-Allow-Origin': '*' }\r\n        }).then(\r\n            res => {\r\n                //let articleInfo= res.data.data[0]\r\n                setArticleTitle(res.data.data[0].title)\r\n                setArticleContent(res.data.data[0].article_content)\r\n                let html = marked(res.data.data[0].article_content)\r\n                setMarkdownContent(html)\r\n                setIntroducemd(res.data.data[0].introduce)\r\n                let tmpInt = marked(res.data.data[0].introduce)\r\n                setIntroducehtml(tmpInt)\r\n                setShowDate(res.data.data[0].addTime)\r\n                setSelectType(res.data.data[0].typeId)\r\n\r\n            }\r\n        )\r\n    }\r\n    useEffect(() => {\r\n        getTypeInfo()\r\n        //获得文章ID\r\n        let tmpId = props.match.params.id\r\n        if (tmpId) {\r\n            setArticleId(tmpId)\r\n            getArticleById(tmpId)\r\n        }\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <Row gutter={5}>\r\n                <Col span={18}>\r\n                    <Row gutter={10} >\r\n                        <Col span={16}>\r\n                            <Input\r\n                                value={articleTitle}\r\n                                placeholder=\"博客标题\"\r\n                                onChange={e => {\r\n                                    setArticleTitle(e.target.value)\r\n                                }}\r\n                                size=\"large\" />\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            &nbsp;\r\n                            <Select defaultValue={selectedType} size=\"large\" onChange={selectTypeHandler}>\r\n                                {\r\n                                    typeInfo.map((item, index) => {\r\n                                        return (<Option key={index} value={item.Id}>{item.typeName}</Option>)\r\n                                    })\r\n                                }\r\n                            </Select>\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Row gutter={10} >\r\n                        <Col span={12}>\r\n                            <TextArea\r\n                                value={articleContent}\r\n                                className=\"markdown-content\"\r\n                                rows={35}\r\n                                onChange={changeContent}\r\n                                onPressEnter={changeContent}\r\n                                placeholder=\"文章内容\"\r\n                            />\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <div\r\n                                className=\"show-html\"\r\n                                dangerouslySetInnerHTML={{ __html: markdownContent }} >\r\n                            </div>\r\n\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Col>\r\n\r\n                <Col span={6}>\r\n                    <Row>\r\n                        <Col span={24}>\r\n                            <Button size=\"large\">暂存文章</Button>&nbsp;\r\n                            <Button type=\"primary\" size=\"large\" onClick={saveArticle}>发布文章</Button>\r\n                            <br />\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <br />\r\n                            <TextArea\r\n                                rows={4}\r\n                                value={introducemd}\r\n                                onChange={changeIntroduce}\r\n                                onPressEnter={changeIntroduce}\r\n                                placeholder=\"文章简介\"\r\n                            />\r\n                            <div className=\"introduce-html\"\r\n                                dangerouslySetInnerHTML={{ __html: '文章简介：' + introducehtml }} >\r\n                            </div>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <div className=\"date-select\">\r\n                                <DatePicker\r\n                                    onChange={(date, dateString) => setShowDate(dateString)}\r\n                                    placeholder=\"发布日期\"\r\n                                    size=\"large\"\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\nexport default AddArticle","D:\\Blog\\admin\\src\\config\\apiUrl.js",[],"D:\\Blog\\admin\\src\\Pages\\ArticleList.js",["55"],"import React, { useState, useEffect } from 'react';\r\nimport '../static/css/ArticleList.css'\r\nimport { List, Row, Col, Modal, message, Button, Switch } from 'antd';\r\nimport axios from 'axios'\r\nimport servicePath from '../config/apiUrl'\r\nconst { confirm } = Modal;\r\nfunction ArticleList(props) {\r\n    const [list, setList] = useState([])\r\n    //得到文章列表\r\n    const getList = () => {\r\n        axios({\r\n            method: 'get',\r\n            url: servicePath.getArticleList,\r\n            withCredentials: true,\r\n            header: { 'Access-Control-Allow-Origin': '*' }\r\n        }).then(\r\n            res => {\r\n                setList(res.data.list)\r\n\r\n            }\r\n        )\r\n    }\r\n    //删除文章的方法\r\n    const delArticle = (id) => {\r\n        confirm({\r\n            title: '确定要删除这篇博客文章吗?',\r\n            content: '如果你点击OK按钮，文章将会永远被删除，无法恢复。',\r\n            onOk() {\r\n                axios(servicePath.delArticle + id, { withCredentials: true }).then(\r\n                    res => {\r\n                        message.success('文章删除成功')\r\n                        getList()\r\n                    }\r\n                )\r\n            },\r\n            onCancel() {\r\n                message.success('没有任何改变')\r\n            },\r\n        });\r\n\r\n    }\r\n    //修改文章\r\nconst updateArticle = (id,checked)=>{\r\n\r\n    props.history.push('/index/add/'+id)\r\n\r\n}\r\n    useEffect(() => {\r\n        getList()\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <List\r\n                header={\r\n                    <Row className=\"list-div\">\r\n                        <Col span={8}>\r\n                            <b>标题</b>\r\n                        </Col>\r\n                        <Col span={3}>\r\n                            <b>类别</b>\r\n                        </Col>\r\n                        <Col span={3}>\r\n                            <b>发布时间</b>\r\n                        </Col>\r\n                        <Col span={3}>\r\n                            <b>简介</b>\r\n                        </Col>\r\n                        <Col span={3}>\r\n                            <b>浏览量</b>\r\n                        </Col>\r\n\r\n                        <Col span={4}>\r\n                            <b>操作</b>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                }\r\n                bordered\r\n                dataSource={list}\r\n                renderItem={item => (\r\n                    <List.Item>\r\n                        <Row className=\"list-div\">\r\n                            <Col span={8}>\r\n                                {item.title}\r\n                            </Col>\r\n                            <Col span={3}>\r\n                                {item.typeName}\r\n                            </Col>\r\n                            <Col span={3}>\r\n                                {item.addTime}\r\n                            </Col>\r\n                            <Col span={3}>\r\n                                <span>{item.introduce}</span>\r\n                            </Col>\r\n                            <Col span={3}>\r\n                                {item.view_count}\r\n                            </Col>\r\n\r\n                            <Col span={4}>\r\n                                <Button onClick={()=>{updateArticle(item.id)}} type=\"primary\" >修改</Button>&nbsp;\r\n\r\n                                <Button onClick={()=>{delArticle(item.id)}} >删除 </Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </List.Item>\r\n                )}\r\n            />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ArticleList","D:\\Blog\\admin\\src\\Pages\\Index.js",["56","57","58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":36,"nodeType":"65","messageId":"66","endLine":1,"endColumn":49},{"ruleId":"67","severity":1,"message":"68","line":43,"column":33,"nodeType":"69","messageId":"70","endLine":43,"endColumn":35},{"ruleId":"63","severity":1,"message":"71","line":1,"column":27,"nodeType":"65","messageId":"66","endLine":1,"endColumn":36},{"ruleId":"63","severity":1,"message":"72","line":17,"column":12,"nodeType":"65","messageId":"66","endLine":17,"endColumn":19},{"ruleId":"63","severity":1,"message":"73","line":17,"column":21,"nodeType":"65","messageId":"66","endLine":17,"endColumn":31},{"ruleId":"67","severity":1,"message":"68","line":22,"column":19,"nodeType":"69","messageId":"70","endLine":22,"endColumn":21},{"ruleId":"67","severity":1,"message":"68","line":24,"column":24,"nodeType":"69","messageId":"70","endLine":24,"endColumn":26},{"ruleId":"63","severity":1,"message":"74","line":17,"column":12,"nodeType":"65","messageId":"66","endLine":17,"endColumn":22},{"ruleId":"63","severity":1,"message":"75","line":17,"column":24,"nodeType":"65","messageId":"66","endLine":17,"endColumn":37},{"ruleId":"67","severity":1,"message":"68","line":51,"column":35,"nodeType":"69","messageId":"70","endLine":51,"endColumn":37},{"ruleId":"67","severity":1,"message":"68","line":98,"column":23,"nodeType":"69","messageId":"70","endLine":98,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":171,"column":8,"nodeType":"78","endLine":171,"endColumn":10,"suggestions":"79"},{"ruleId":"63","severity":1,"message":"80","line":3,"column":50,"nodeType":"65","messageId":"66","endLine":3,"endColumn":56},{"ruleId":"63","severity":1,"message":"81","line":1,"column":17,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},{"ruleId":"63","severity":1,"message":"71","line":1,"column":27,"nodeType":"65","messageId":"66","endLine":1,"endColumn":36},{"ruleId":"82","severity":1,"message":"83","line":5,"column":13,"nodeType":"84","endLine":5,"endColumn":93},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'createContext' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'typeTop' is assigned a value but never used.","'setTypeTop' is assigned a value but never used.","'updateDate' is assigned a value but never used.","'setUpdateDate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTypeInfo' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["87"],"'Switch' is defined but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [getTypeInfo, props.match.params.id]",{"range":"90","text":"91"},[5854,5856],"[getTypeInfo, props.match.params.id]"]